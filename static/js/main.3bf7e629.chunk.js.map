{"version":3,"sources":["components/pages/FirstPage/FirstPage.js","components/pages/SecondPage/SecondPage.js","components/SlideA/SlideA.js","components/pages/Ctesta/Ctesta.js","components/pages/CTestB/CTestB.js","components/pages/BKermit.js","components/SlideB/SlideB.js","components/SlideC/SlideC.js","components/AllSlides/AllSlides.js","App.js","serviceWorker.js","index.js"],"names":["FirstPage","Fragment","SecondPage","SlideA","className","to","exact","path","component","Ctesta","color","CTestB","style","width","src","autoPlay","BKermit","process","SlideB","SlideC","AllSlides","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gUAWeA,EATG,WAChB,OAAO,kBAAC,IAAMC,SAAP,KACL,yCACA,0ECKWC,EARI,WACjB,OAAO,kBAAC,IAAMD,SAAP,KACL,0CACA,mFCkBWE,MAlBf,WACE,OACE,yBAAKC,UAAU,aACb,sEAIA,kBAAC,IAAD,CAAMC,GAAG,cACP,qDACF,kBAAC,IAAD,CAAMA,GAAG,eAAc,sDACvB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,aAAaC,UAAWR,IAC1C,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,cAAcC,UAAWN,OCNpCO,EATA,WACb,OAAO,kBAAC,IAAMR,SAAP,KACL,wBAAIS,MAAM,SAAV,UACA,uECWWC,G,MAbA,WACb,OAAO,kBAAC,IAAMV,SAAP,KACL,yBAAKG,UAAU,QACb,sCAGE,2BAAOA,UAAU,UAAUQ,MAAO,CAACC,MAAM,SAAUC,IAAI,mCAAmCC,UAAQ,IACpG,2CACA,uDCSSC,G,MAjBC,WACd,OACE,yBAAKZ,UAAU,mBACb,sCAGA,yBAAKU,IAAKG,yCACV,2CAGC,2C,MCkCQC,MAxCf,WACE,OACE,yBAAKd,UAAU,qBACb,yBAAKA,UAAU,SACb,wBAAIA,UAAU,WAAd,kBAGA,wBAAIA,UAAU,WAAd,kBAGA,wBAAIA,UAAU,WAAd,kBAGA,kBAAC,IAAD,CAAMC,GAAG,WACT,sDAEA,kBAAC,IAAD,CAAMA,GAAG,WACP,sDAEF,kBAAC,IAAD,CAAMA,GAAG,YACT,4EAGF,yBAAKD,UAAU,QACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,UAAUC,UAAWC,IACvC,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,UAAUC,UAAWG,IACvC,kBAAC,IAAD,CAAOL,OAAK,EAACC,KAAK,WAAWC,UAAWQ,MAG5C,yBAAKZ,UAAU,SACb,wBAAIA,UAAU,MAAd,aACA,wBAAIA,UAAU,MAAd,aACA,wBAAIA,UAAU,MAAd,gBCbOe,MArBf,WACE,OACI,yBAAKf,UAAU,eACb,8CAGA,kBAAC,IAAD,CAAMC,GAAG,WACP,sDAEF,kBAAC,IAAD,CAAMA,GAAG,WACP,sDAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,UAAWG,IACvC,kBAAC,IAAD,CAAOL,OAAK,EAACC,KAAK,UAAUC,UAAWC,OCAlCW,MAdf,WACE,OACE,kBAAC,IAAMnB,SAAP,KACE,yBAAKG,UAAU,iBACb,yBAAKA,UAAU,WACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,UCFKiB,MARf,WACE,OACE,kBAAC,IAAMpB,SAAP,KACE,kBAAC,EAAD,QCMcqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACT,kBAAC,IAAD,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDsHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3bf7e629.chunk.js","sourcesContent":["import React from 'react'\n\nconst FirstPage = () =>{\n  return <React.Fragment>\n    <h1>FirstPage</h1>\n    <div>\n      esta pagina es la vista de la FirstPage\n    </div>\n    \n  </React.Fragment>\n}\nexport default FirstPage","import React from 'react'\n\nconst SecondPage = () =>{\n  return <React.Fragment>\n    <h1>SecondPage</h1>\n    <div>\n      segundo esta pagina es la vista de la SecondPage\n    </div>\n  </React.Fragment>\n}\nexport default SecondPage","import React from 'react';\nimport { Switch, Route, Link } from 'react-router-dom'\nimport FirstPage from '../pages/FirstPage/FirstPage'\nimport SecondPage from '../pages/SecondPage/SecondPage'\n\nfunction SlideA() {\n  return (\n    <div className=\"slide one\">\n      <h2>\n        soy el slide A alfa de giancarlo arias\n      </h2>\n      \n      <Link to=\"/FirstPage\">\n        <button>go to First Page</button></Link>\n      <Link to=\"/SecondPage\"><button>go to Second Page</button></Link>\n      <Switch>\n        <Route exact path='/FirstPage' component={FirstPage} />\n        <Route exact path='/SecondPage' component={SecondPage} />\n      </Switch>\n    </div>\n  )\n}\n\nexport default SlideA","import React from 'react'\n\nconst Ctesta = () =>{\n  return <React.Fragment>\n    <h1 color=\"white\">Ctesta</h1>\n    <div>\n      esta pagina es la vista de la Ctesta\n    </div>\n    \n  </React.Fragment>\n}\nexport default Ctesta","import React from 'react'\nimport './CTestB.css'\n\nconst CTestB = () =>{\n  return <React.Fragment>\n    <div className=\"este\" >\n      <h1>\n        Luffy, \n      </h1>\n        <video className=\"videito\" style={{width:'500px'}} src=\"/videos/OnePieceOpOverTheTop.mp4\" autoPlay/>\n      <h2>haciendo un</h2>\n      <h1>gomu gomu no pistol</h1>\n    </div>\n    \n  </React.Fragment>\n}\nexport default CTestB","import React from 'react'\nimport './BKermit.css'\n\nconst BKermit = () => {\n  return (\n    <div className=\"BKermit-wrapper\">\n      <h1>\n        Kermit\n      </h1>\n      <img src={process.env.PUBLIC_URL + '/images/keyboardKermit.gif'} />\n      <h2>\n        haciendo un\n      </h2>\n       <h1>\n         git push\n       </h1>\n    </div>\n  )\n}\n\nexport default BKermit","import React from 'react'\nimport { Switch, Route, Link } from 'react-router-dom'\nimport Ctesta from '../pages/Ctesta/Ctesta'\nimport CTestB from '../pages/CTestB/CTestB'\nimport BKermit from '../pages/BKermit'\nimport './SlideB.css'\n\nfunction SlideB() {\n  return (\n    <div className=\"slide B container\">\n      <div className=\"A-row\">\n        <h1 className=\"item-A1\">\n          soy el item A1\n          </h1>\n        <h1 className=\"item-A2\">\n          soy el item A2\n          </h1>\n        <h1 className=\"item-A3\">\n          soy el item A3\n          </h1>\n        <Link to=\"/Ctesta\">\n        <button>Aqui click test a</button>\n        </Link>\n        <Link to=\"/CTestB\">\n          <button>Aqui click test B</button>\n        </Link>\n        <Link to=\"/BKermit\">\n        <button>Aqui trabajando como un mu√±eco jaja</button>\n        </Link>\n      </div>\n      <div className=\"page\">\n        <Switch>\n          <Route exact path='/Ctesta' component={Ctesta} />\n          <Route exact path='/CTestB' component={CTestB} />\n          <Route exact path='/BKermit' component={BKermit} />\n        </Switch>\n      </div>\n      <div className=\"D-row\">\n        <h1 className=\"D1\">soy un D1</h1>\n        <h1 className=\"D2\">soy un D2</h1>\n        <h1 className=\"D3\">soy un D3</h1>\n      </div>\n    </div>\n\n  )\n}\n\nexport default SlideB","import  React from 'react'\nimport {Switch, Route, Link} from 'react-router-dom'\nimport Ctesta from '../pages/Ctesta/Ctesta'\nimport CTestB from '../pages/CTestB/CTestB'\n\n\nfunction SlideC() {\n  return (\n      <div className=\"App slide C\">\n        <h1>\n          soy el slide C\n        </h1>\n        <Link to=\"/Ctesta\">\n          <button>Aqui click test a</button>\n        </Link>\n        <Link to=\"/CTestB\">\n          <button>Aqui click test b</button>\n        </Link>\n        <Switch>\n          <Route exact path='/CTestB' component={CTestB}/>\n          <Route exact path='/Ctesta' component={Ctesta}/>\n        </Switch>\n      </div>\n    \n  )\n}\n\nexport default SlideC","import React from 'react'\nimport './AllSlides.css'\nimport SlideA from '../SlideA/SlideA'\nimport SlideB from '../SlideB/SlideB'\nimport SlideC from '../SlideC/SlideC'\n\nfunction AllSlides() {\n  return (\n    <React.Fragment>\n      <div className=\"outer-wrapper\">\n        <div className=\"wrapper\">\n          <SlideA />\n          <SlideB />\n          <SlideC />\n        </div>\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default AllSlides","import React from 'react';\nimport AllSlides from './components/AllSlides/AllSlides'\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <AllSlides/>\n    </React.Fragment>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n<BrowserRouter>\n\t<App />\n</BrowserRouter>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}